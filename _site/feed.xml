<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeoShih的项目空间</title>
    <description>我，伪极客，貌似热爱技术其实又没什么技术，对艺术和设计着迷但是审美很糟烂。开辟这个空间的目的是记录和分享最近的项目进展。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Sep 2018 18:03:41 +0800</pubDate>
    <lastBuildDate>Wed, 12 Sep 2018 18:03:41 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>NeXt AVM</title>
        <description>&lt;h2 id=&quot;next-avm&quot;&gt;NeXt Avm&lt;/h2&gt;

&lt;p&gt;NeXtAvm = MCIM +  Mirroria&lt;/p&gt;

&lt;h3 id=&quot;mcim&quot;&gt;MCIM&lt;/h3&gt;

&lt;p&gt;Multi-Cameras Input Module 是一个提供多摄像头接入功能的外设模块，支持 dvp 输出，mipi输出，ahd输出，usb输出等多种接口。&lt;/p&gt;

&lt;h3 id=&quot;mirroria&quot;&gt;Mirroria&lt;/h3&gt;

&lt;p&gt;Mirror In the Air 是一个3D AVM APP， 支持android系统，同时也有 linux 的发布版本。可以实现 3D AVM，流媒体后视镜，行车记录仪等功能。&lt;/p&gt;

&lt;p&gt;主要特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持目前主流的AVM自动拼接图形。&lt;/li&gt;
  &lt;li&gt;支持2D，3D画面。&lt;/li&gt;
  &lt;li&gt;支持分屏显示。&lt;/li&gt;
  &lt;li&gt;支持动态轨迹。&lt;/li&gt;
  &lt;li&gt;支持上百种常见车型和车漆颜色设置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后续&lt;/p&gt;

&lt;p&gt;车道线检测，行人检测的功能都在开发中。&lt;/p&gt;

&lt;h2 id=&quot;形态和接口&quot;&gt;形态和接口&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;/images/kuangjiatu-1.png&quot; /&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;demo&quot;&gt;DEMO&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;/images/lianjiesj-s.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;使用Usb输出连接手机，Android平台 实现3D AVM功能。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;/images/mcim-a-2.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;使用MIPI输出连接RK3288开发板，Android平台 实现3D AVM功能，720P显示分辨率全屏输出。&lt;/p&gt;

&lt;h4 id=&quot;测试视频1&quot;&gt;测试视频1&lt;/h4&gt;

&lt;iframe height=&quot;498&quot; width=&quot;640&quot; src=&quot;http://player.youku.com/embed/XMzgyMDk0MzE2OA==&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;MCIM通过Usb连接到手机，运行3D AVM。&lt;/p&gt;

&lt;h4 id=&quot;测试视频2&quot;&gt;测试视频2&lt;/h4&gt;

&lt;iframe height=&quot;498&quot; width=&quot;640&quot; src=&quot;http://player.youku.com/embed/XMzgyMDk0NjE1Ng==&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;MIPI输出连接RK3288，25fps流畅运行，不卡顿&lt;/p&gt;

&lt;h4 id=&quot;测试视频3&quot;&gt;测试视频3&lt;/h4&gt;

&lt;iframe height=&quot;498&quot; width=&quot;640&quot; src=&quot;http://player.youku.com/embed/XMzgyMDkwMzU4NA==&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 03 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/03/AVM-NeXt.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/03/AVM-NeXt.html</guid>
        
        <category>车载环视</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>新一代车载环视解决方案</title>
        <description>&lt;h2 id=&quot;next-gen-avm-solution&quot;&gt;neXt Gen Avm Solution&lt;/h2&gt;

&lt;p&gt;目前市面上所有的 AVM 产品都是一个设备主机盒子的形态。主机内部包含完整的硬件，系统固件，算法代码，控制逻辑和交互界面。&lt;/p&gt;

&lt;p&gt;在这种情况下，为了降低成本和价格，势必选择很低端的SOC，从而导致SOC算力不强， 输出的画面分辨率不高，只能显示单一的2D画面等问题。&lt;/p&gt;

&lt;p&gt;如果选择高性能的能够实现AVM的SOC方案， 又会发现成本增长数倍。&lt;/p&gt;

&lt;p&gt;其实，在这两者之间存在着大量的各种品牌型号的，性能强劲，成本低廉的SOC，广泛应用于车机，车载系统，平板等领域，它们不能应用于AVM产品唯一的原因就是——&lt;strong&gt;不能接入4个摄像头。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以，AVM产品需要解决的其实是两个技术问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用低成本解决多摄像头接入。&lt;/li&gt;
  &lt;li&gt;AVM算法和模型。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决这两个问题，就可以在任意平台和系统上实现AVM功能，而无关SOC方案。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;关于avm的思考&quot;&gt;关于AVM的思考&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;海思方案的缺陷&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用MCIM模块跟车机对接，实现AVM功能，在成本上， 比第二代海思方案的360全景产品更低一点。并且可以实现3D AVM，流媒体后视等 海思方案无法实现的功能。海思方案的缺陷在于，天生的处理能力差，不适合做图像处理，海思方案之所以能够这么火，是因为找到了一个行业的狭缝，刚刚能用，价格很低，正规方案成本死活降不下来。海思只能输出 800x480@12fps 左右的2D AVM画面， 这个性能天花板是海思芯片做AVM方案的死穴。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;独立的360盒子已经没有太多的商业价值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在的360盒子都在跟车机对接， 但是360盒子跟车机对接实际上是很鸡肋， 两个系统搭载一起，其中一个系统的目的就是向另一个系统提供一个功能接口，不管是从系统结构，性能，还是技术上，都很古怪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4合1采集芯片兼容性不好&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现有的芯片厂商也有4摄像头输入合1，单接口输出的方案， 但是这几个方案都无一例外使用了MIPI的虚通道的接口模式， 所以中低档的SOC很难对接这种解决方案， 目前能够对接的也就是 IMX6， T7 等特定芯片，大宗产品使用的MT，高通等 方案都没法直接使用这种低成本的单芯片方案。Nextchip的片子也明确只能再IMX6, T7上使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T7方案做车机，性能不好&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;T7方案如果是作为车机方案，应该是走不远。 车机厂商不会因为一个360功能就把自己现在的产品整套方案全部换成 T7， 不光是成本的问题， 还有T7的CPU（A7）和GPU（mali400mp2）性能都不强，T7推出太晚，已经错过了时机。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T7做AVM盒子性价比不高&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果使用T7单独来做AVM产品，那么又存在性价比不高的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AVM本质上就是多摄像头输入 + 图像合成算法。所以不管用什么方案，用什么系统， 本质上就是在解决这两个问题。现在绝大多数中低档SOC不支持多摄像头输入， 是因为摄像头接口标准很多， 支持哪一种这个很难决策，支持任何一种方案，都意味着IC成本增加，市场接受度降低。所以可以预见的未来，中低端IC厂商的SOC都不会针对AVM增加多摄像头输入能力。&lt;/p&gt;

&lt;p&gt;高端方案例如 Nvidia，J6是早就支持的， 但是也会选择高档一些的接口标准，以免降低了档次和芯片的规格指标。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于分辨率&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于现在的主流AVM方案来说， 4个720P摄像头输入都是劣势而不是优势。 因为对于车机显示频的 1024x600或者1280x720显示清晰度来说， 能得到最好图像效果的摄像头应该是  720x480 的数字摄像头（场模式，模拟信号调试方式，导致了很严重的图像质量劣化）， 使用4个720P摄像头来合成一个 800x480的全景画面， 因为分辨率降低太多，所以需要3x3或者4x4的算子来采样， 而双线性插值的 2x2采样不够用。&lt;/p&gt;

&lt;p&gt;4x720P的图像采集，缓存，遍历， 本身就成了了大多数中低端SOC的性能负担， 例如在IMX6上， GPU合成AVM跑30fps一点问题都没有，但是一旦打开视频输入， 输出就会被降低 12fps上下。妥妥的腰斩。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;真正的问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;国内AVM产品从12年左右有公司推出产品到现在，有6年多了。AVM产品也经历了好几代更替，富士通方案，NXP方案，TI方案，海思方案，飞思卡尔方案，凌阳方案，Latiice方案……成王败寇，真正赚钱的方案没两个。&lt;/p&gt;

&lt;p&gt;目前的行业趋势来看，AVM作为独立产品生存的空间越来越小，越来越作为 车机的配件，搭配车机销售。这跟我15年的预测一致。&lt;/p&gt;

&lt;p&gt;AVM如果作为车机的配件，现在的几款产品都很鸡肋。海思方案效果和性能太差， 飞思卡尔方案比车机还贵，性能也算不上高。导致这个原因的就在于AVM的多摄像头输入要求，使得能够选择的SOC方案很少，要么就是海思的监控芯片，能够满足 多摄像头输入，但是性能很差。要么就是IMX6这样的特定SOC，性价比超低。 其实现在性能又强，价格又低的SOC到处都是，但是AVM就是摆脱不了特定的方案，这可能也算另一个层次的缺少核心技术吧，国内这么多做AVM的厂家，都在拿方案修修补补写写软件，没有一家公司有能力深入到更深的系统层次去解决方案的问题。现在主流的车机性能都比海思芯片或者IMX6强很多，却需要把车机里对资源和性能要求最高的一个功能，交给外挂的一颗低端芯片，想想就觉得奇葩。&lt;/p&gt;

&lt;p&gt;其实解决问题的关键，就是在控制住成本的前提下，实现多摄像头的输入问题， 这个问题解决了， AVM盒子的帧率低，分辨率不高，图像卡顿，3D效果差， 不能增加新的功能等问题就迎刃而解。&lt;/p&gt;

&lt;p&gt;从这个角度来看，用FPGA来实现低成本低延时的视频输入，确实是正确的思路，能够真正解决本质的问题。&lt;/p&gt;

&lt;p&gt;选一颗性能强，价格低的SOC，增加￥100多成本的FPGA模块实现多摄像头采集。&lt;/p&gt;

&lt;p&gt;跟海思对标， 价格高一截，但是性能功能甩海思两代以上，跟海思就比功能，比指标。&lt;/p&gt;

&lt;p&gt;跟IMX6对标，价格比IMX6低一大截，性能还超IMX6.（IMX6面世很早，跟主流的A53+T720对比，性能已经只能算中低档了。）。&lt;/p&gt;

&lt;p&gt;跟T7对标，价格略高（其实未必，如果T7卖的不好价格肯定不会低），性能高一大截。T7作为全志主推的低端片子，性价比 可能比其他大量出货的国产片子差很多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MCIM替代海思AVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果使用MCIM跟车机方案对接，来实现AVM功能， 那么很有希望能够成为通用的3D版AVM解决方案。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcim-a-2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;使用MIPI输出，在RK3288，Android平台 实现3D AVM功能。720P显示分辨率全屏输出， 25fps毫无压力，CPU和GPU都表示工作不饱和。&lt;/p&gt;

&lt;h4 id=&quot;测试视频1&quot;&gt;测试视频1&lt;/h4&gt;

&lt;p&gt;25fps流畅运行，不卡顿&lt;/p&gt;

&lt;iframe height=&quot;498&quot; width=&quot;640&quot; src=&quot;http://player.youku.com/embed/XMzgyMDk0NjE1Ng==&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;测试视频2&quot;&gt;测试视频2&lt;/h4&gt;

&lt;p&gt;25fps流畅运行，不卡顿，不会像海思方案那样看到明显的图像一帧一帧跳动。&lt;/p&gt;

&lt;iframe height=&quot;498&quot; width=&quot;640&quot; src=&quot;http://player.youku.com/embed/XMzgyMDk2Nzk0OA==&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Tue, 03 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/03/AVM-About-NeXt.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/03/AVM-About-NeXt.html</guid>
        
        <category>车载环视</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>MCIM(Multi-Camera input Module)</title>
        <description>&lt;h2 id=&quot;mcim&quot;&gt;MCIM&lt;/h2&gt;

&lt;p&gt;MCIM（Multi-Camera input Module ) was designed to accomplish multi-camera videos input via single video interface.  In most soc (especially general-purpose soc) , there are no more than two video input interfaces that what are dvp or mipi. MCIM make the soc captures four or five or six videos , and make some special need possible.&lt;/p&gt;

&lt;!--more--&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcmc-descript.jpg&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&quot;摄像头&quot;&gt;摄像头&lt;/h3&gt;
&lt;p&gt;板卡支持AHD 720P摄像头输入，AHD接口的摄像头市面上型号很多，AHD也广泛使用于安防监控，汽车倒车影像等领域。板卡的摄像头接口中，给摄像头供电是5V电源，因此，只要是市面上可以采购到的 5V供电、720P分辨率的AHD摄像头都能支持接入。板卡最多支持6路AHD摄像头接入。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcim-a-2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;使用MIPI输出，在RK3288，Android平台 实现3D AVM功能。720P显示分辨率全屏输出， 25fps毫无压力，CPU和GPU都表示工作不饱和。&lt;/p&gt;

&lt;h3 id=&quot;nstc-or-pal&quot;&gt;Nstc or Pal&lt;/h3&gt;
&lt;p&gt;板卡支持30fps和25fps的摄像头，但是目前所有的测试都是使用的25fps的PAL制摄像头。&lt;/p&gt;

&lt;h3 id=&quot;灵活的输出&quot;&gt;灵活的输出&lt;/h3&gt;
&lt;p&gt;AHD输出实现之后，加上前期的CVI，MIPI，MCIM实际上已经成为了一个通用性和灵活性都比较强的接口模块了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;灵活的接口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;能够根据后端设备支持的接口类型，选择AHD输出，8bits DVP输出，16bits DVP输出 , 1lanes , 2lanes或者4lanes MIPI输出。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;灵活的分辨率&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;能够根据后端设备的接口带宽和处理能力，选择 720P（4x640x360），1080P（4x960x540)或者 2.5K（4x1280x720）输出。&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/07/02/mcim.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/07/02/mcim.html</guid>
        
        <category>Board</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>MCIM-AHD</title>
        <description>&lt;h2 id=&quot;mcim-with-ahd-output&quot;&gt;MCIM with AHD output&lt;/h2&gt;

&lt;p&gt;NVP6021 接口芯片调试完成，调试过程中没有遇到太多问题，跟调试CVI输出的时候一样， 主要就是确保时序正常。只要确保时序正常，AHD接收器就能收到并显示正常的视频。尝试在输出时序中加入很小的抖动，很明显就能观察到视频不稳定或者视频信号丢失。&lt;/p&gt;

&lt;p&gt;毕竟是模拟信号，所以只能靠两端严格设定好时序来进行同步，因此对时序很敏感， 但同时也因为必须按照严格定好的时序来工作，所以芯片的驱动就会很简单， 基本没有复杂的配置和调试。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcim-a-1.jpg&quot; /&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;div align=&quot;center&quot;&gt;NVP6021AHD输出模块。&lt;/div&gt;

</description>
        <pubDate>Wed, 06 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/06/mcim-ahd.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/06/mcim-ahd.html</guid>
        
        <category>Board</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>车载环视-要不要联网</title>
        <description>&lt;h2 id=&quot;yes&quot;&gt;Yes&lt;/h2&gt;

&lt;p&gt;车载AVM系统跟其他车载设备一样，最终都会连接进入车联网。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;avm产品开发中的思考&quot;&gt;AVM产品开发中的思考&lt;/h2&gt;

&lt;p&gt;其实联网不联网从大的趋势来说没啥可讨论的。在我的工作经历中，碰到一个很具体的案例，记录下来以资后续借鉴。&lt;/p&gt;

&lt;p&gt;大概是不到两年前，我所在团队的AVM&lt;sup id=&quot;fnref:AVM&quot;&gt;&lt;a href=&quot;#fn:AVM&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;产品开发过程中，关于产品研发的后续走向，团队内部发生了分歧。当时正值一代产品缓慢退市，二代产品冒头的时期。简单说，一代产品就是模拟摄像头输入，模拟视频输出，低分辨率，二维俯视画面显示，主要方案要么是NXP的处理器，要么是TI的37xx系列+TVP5158 4模拟输入AD。二代产品有公司在用Freescale的IMX6开发，也有公司在用海思的监控芯片做开发。主要是实现高清摄像头输入，高清视频输出。显而易见的是IMX6性价比不高，海思的芯片性能有瓶颈。&lt;/p&gt;

&lt;p&gt;当时我们团队的一代产品卖的并不好，因为一些原因，内部的合力并不能一致输出。而二代产品我们已经在IMX6上开发了个一半，效果已经实现，高清摄像头方案已经跑通，3D全景效果也运行起来了。接下来就碰到一个很现实的障碍，基于海思芯片的高清产品在价格上有极大的优势，已经占了一大半的市场份额，我们的产品怎么定义，针对什么目标客户，怎么回避海思方案的优势，这就成了一个问题。&lt;/p&gt;

&lt;p&gt;海思方案的效果能够达到高清摄像头输入，600*480@15fps分辨率的输出（这个片子的极限），硬件成本不超过￥600，在车载小屏幕上观看效果很好。而IMX6的方案，硬件成本远远超过￥1K，但是软件上可优化改善和增加功能的地方很多，基本不受限制。&lt;/p&gt;

&lt;h3 id=&quot;联网&quot;&gt;联网&lt;/h3&gt;

&lt;p&gt;团队内小部分人的思路是增加4G功能，把车载AVM产品连接到互联网里，让车载摄像头的视频可以像监控系统那样被分享。通过连接来极大的增加产品的附加价值并准备后续与互联网应用接轨。理由很高端，很充沛：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;互联产生价值增值。&lt;/li&gt;
  &lt;li&gt;联网了就能往互联网靠，有利于后续的融资和发展。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;不联网&quot;&gt;不联网&lt;/h3&gt;

&lt;p&gt;另外大部分人的思路是不联网，或者联网做个选配件，爱连连，不爱连拉倒。理由很具体，很客观：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;给本来性价比就不高的产品再增加一个4G模块，这个成本先不考虑，联网的流量费，客户是否愿意支付。&lt;/li&gt;
  &lt;li&gt;联网假设出来的应用场景意味着车辆静止的时候，也可能需要实时联网，是否会导致车辆电瓶亏电，给用户带来麻烦。如果对电平进行监控，没电了就不联网，做不到全时段，那么连还是不连是否有差别。&lt;/li&gt;
  &lt;li&gt;AVM产品的核心功能是辅助司机驾驶，现阶段的首要需求是提升分辨率，提升用户体验，这个核心功能都没有解决，做联网的功能开发是本末倒置。&lt;/li&gt;
  &lt;li&gt;海思方案是有明显缺陷的，IMX6产品向着高清输入，高清输出，3D显示的目标走，同时考虑使用替代摄像头来降低成本。最终就会跟海思方案抢占不同的市场，海思方案卖后装，IMX6方案卖前装，互相并不挤压。所以应该抓紧时间完善IMX6高清，3D的软硬件。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;结论是联网&quot;&gt;结论是联网&lt;/h3&gt;

&lt;p&gt;后来我们团队的开发工作确定先做4G联网功能，并把中心转向APP的开发，视频的回传和分享。&lt;/p&gt;

&lt;h3 id=&quot;结果&quot;&gt;结果&lt;/h3&gt;

&lt;p&gt;4G联网并非很强的用户需求，确实没有达到预期的设想。并且因为4G通信稳定性，速率的问题，在使用体验上一直有BUG。而且因为4G网络的资费问题， 实际上4G联网功能在公司的AVM产品上一直没有形成强卖点，后续两年多的时间一直在解决稳定性，资费，等系统问题和体验问题，结果成了产品的一个鸡肋功能，食之无味，弃之可惜。反倒是一些竞品，把4G联网当做选配件来做，既吸引了一些用户，也没给自己挖坑。&lt;/p&gt;

&lt;h2 id=&quot;后续思考&quot;&gt;后续思考&lt;/h2&gt;

&lt;p&gt;之所以把这个案例记下来，并非上述几条分析对比很有参考意义，而是下边的思考。之所以一个团队在两年前的那个时刻会定义AVM去做4G联网功能，简单的几条正反意见对比就能得出结论，是团队里没有人仔细思考过产品的本质。&lt;/p&gt;

&lt;h3 id=&quot;互联产生价值并不成立&quot;&gt;互联产生价值并不成立&lt;/h3&gt;

&lt;p&gt;两年前虽然正值互联网+概念大热，但是大家都已经意识到，联了这么多东西，这么多数据进来。网络里全是冗余的信号和垃圾数据，互联网公司都在思考如何挖掘数据的意义，如何通过大数据产生价值。在这种情况下，接入一堆车上的重复冗余视频数据并没有太大的价值。就如同大佬们所说”互联网红利终结了“，”上半场结束了“。大家并非没有数据，而是没有有价值的数据，以及从数据获得价值的方法。&lt;/p&gt;

&lt;h3 id=&quot;对汽车的不间断监控并不会为客户带来价值&quot;&gt;对汽车的不间断监控并不会为客户带来价值&lt;/h3&gt;

&lt;p&gt;我们定义的产品使用场景是，连接4G网络之后，用户可以通过手机随时监控车辆的状况，确认车辆是否被损坏，并且在车辆被蓄意破坏的时候还可以连接车主手机，报告车主。随着汽车销量的逐年攀升和生活品质提升，我们已经开始慢慢有了正常的汽车文化和汽车价值观，越来越多的车主把汽车当作工具而不是奢侈品对待。80后90后买中低档车就是为了上班方便，富二代跑车是为了泡妞方便，中年人买中高档车就是为了在高强度的社会压力下，出行的时候身体会比较舒服。你看，大家都把车当作手段而不是目的，这真是让人欣慰。&lt;/p&gt;

&lt;p&gt;我很着急的把车停在窄巷里边的非正规停车位，是要着急赶紧去我深爱的客户，我要帮他把上周起草的合同里一处细节解释清楚。这个客户跟我关系很好，没有亏待过我，同样，我从来没有让他失望给他制造麻烦。你要保护我的汽车不被刮蹭或者破坏，随便吧，但是我跟张所长说话的时候你TM最好别打扰我，张所长时间很忙，我不想太打扰他。&lt;/p&gt;

&lt;p&gt;我刚刚做完今年3季度的销售部署，三个区域经理都不会有问题，但是华南区我们今年才设立，前两个季度很不理想，小张虽然聪明，但是没有狠劲，下半年啊，下半年……。“……嘀嘀嘀，嘀嘀嘀，您的车辆检测到有震动，可能是人为破坏……”（来自Iphone APP推送），“小王，手机说我车被破坏了，去看看”。（十分钟后）“X总，没事，车库好好的，啥事都没有”，“这软件老是打扰我，你帮我删一下。” “……下半年，下半年……”&lt;/p&gt;

&lt;p&gt;我们推崇的正常汽车文化，汽车应该是工具，而不是奢侈品，不是需要供奉的佛像，在这种情况下，正确的价值观应该是汽车坏了走保险修好就行，如果我还需要装一个软件，每个月支付一大笔流量费，整天提心吊胆汽车被人剐了，每两个小时打开APP看一下汽车周围都有什么人，那车主就成孙子了。&lt;/p&gt;

&lt;h2 id=&quot;那应该怎么选择&quot;&gt;那应该怎么选择&lt;/h2&gt;

&lt;p&gt;我的意见是，深入到产品的本质来取舍联网与否，而不是为了联网去假设应用场景。首先，车载电子部件联网是必然的趋势，有价值的车载电子部件所产生的数据一定会被更加频繁的采集，保存和二次使用。但是没用的传感器联网并不会增加其有用程度，虽然有的数据，开始没什么用，但是联网形成大数据之后发现，我X，太有价值了。这种情况，并非原始数据没用，而是原始数据最开始不知道怎么用。AVM产品如果分辨率低，可视范围很窄，那就是典型的用处不大的数据，站在这个角度讲，想辙让AVM更清晰，更流畅，延时更低，视图更直观有效那就是第一位的需求。在视频清晰度和显示直观有效的问题解决之前考虑如何联网，数据怎么用，其实就是再次接入了一堆无用的数据进入网路，如果解决了产品的清晰度，可用性等问题，那么再之后，联与不联，怎麽联，你随便吧。&lt;/p&gt;

&lt;p&gt;正如老罗所说，现在的问题是没有流量。因为社会的总时间是固定的，一旦被占用就不可再生的资源，在这种情况下，所有的APP都要解决一个问题，怎么替用户节省时间，而不是去占用用户的时间。车辆监控APP，就是额外占用用户时间的典型案例，大家不会喜欢你的，只会讨厌你。&lt;/p&gt;

&lt;p&gt;如果站在这个角度思考问题的话，AVM就好像是小妾或者妃子，应该在车主看你的时候，尽可能的花枝招展，让车主产生额外的需求。而不是在车主本来没事可以休息一下的时候，搞个APP，去招人烦。&lt;/p&gt;

&lt;p&gt;总结一下：
从&lt;strong&gt;价值观&lt;/strong&gt;的角度出发，我们应该建议车主用车随意一点，不要为车的事情烦恼，因为车是工具，是消耗品，整天担心车碰了划了，那就不要开车了，要么公共交通，要么雇专职司机，都会让生活更美好。从&lt;strong&gt;用户体验&lt;/strong&gt;的角度出发，我们不应该强行推广一个占用用户时间，流量费用，心情的APP，去做所谓的保护车辆的功能。从&lt;strong&gt;产品设计&lt;/strong&gt;的角度出发，一个高清，交互好的AVM就是极致的产品，而一个坐在车上看不太清楚，用手机也看不太清楚，还要耗电耗流量的产品，就只能呵呵了。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:AVM&quot;&gt;
      &lt;p&gt;环视显示器，在国内的汽车电子圈，又经常被称作“车载360”。指的是通过在车身安装的4-6个摄像头拼接出一个汽车周边完整实时视频的辅助驾驶系统。 &lt;a href=&quot;#fnref:AVM&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 18 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/18/AVM-does-avm-need-network-or-not.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/18/AVM-does-avm-need-network-or-not.html</guid>
        
        <category>车载环视</category>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Aodai</title>
        <description>&lt;h2 id=&quot;what-is-aodai&quot;&gt;What is AoDai&lt;/h2&gt;
&lt;hr /&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/zk2.jpg&quot; /&gt;
&lt;img src=&quot;/images/zk2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;AoDai is add-on drive-assistant &amp;amp; infotainment&lt;sup id=&quot;fnref:infotainment&quot;&gt;&lt;a href=&quot;#fn:infotainment&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: 注册印象笔记  
e=&amp;gt;end: 您可以使用markdown  
op1=&amp;gt;operation: 登录印象笔记  
op2=&amp;gt;operation: 购买并登录马克飞象  
cond=&amp;gt;condition: 是否已经购买并登录了马克飞象?  

st-&amp;gt;op1-&amp;gt;cond
cond(yes)-&amp;gt;e
cond(no)-&amp;gt;op2-&amp;gt;e  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们已经有了各种各样的车载系统和车载终端，后装的或者原厂的，旋钮的或者触摸的，8寸的或者13寸的，嵌在中控台的或者卡在后视镜上的，支持手势命令的或者支持语音交互的…&lt;/p&gt;

&lt;p&gt;但是不管尝试过多少种，我们总是觉得，那些让人炫目的功能总是很少用到，那些有用的功能仍然不是$200产品能够具备的。很多时候，只需要两三天或者两三个小时，我们就会意识到 &lt;strong&gt;这只是个没用的低端山寨手机&lt;/strong&gt;而已，他还不如我的手机好用。&lt;/p&gt;

&lt;p&gt;我们需要为我的老旧座驾加装一个中控导航，一个行车记录仪，一个倒车影像或者车载环视系统，这一切都装上之后，好像才有那么一点管用了。&lt;/p&gt;

&lt;p&gt;为什么要加装这么多东西，所有这些东西本质上都是一个linux或者android或者其他某个系统的终端设备而已。理论上说，我们只需要有一个专门为汽车定制的Performance Version平板电脑就可以了。没有丑陋的中控台框架，没有专车专用的古怪界面，就是一个最简洁的车载平板。&lt;/p&gt;

&lt;h2 id=&quot;what-is-different&quot;&gt;What is different&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;极简的操作界面。&lt;/p&gt;

&lt;p&gt;支持多种车辆的中控台结构。&lt;/p&gt;

&lt;p&gt;所有车载功能一键切换，无需繁琐的操作。&lt;/p&gt;

&lt;p&gt;6x高清摄像头输入，集成AVM，行车记录仪，流媒体后视镜。&lt;/p&gt;

&lt;p&gt;可旋转，可上下移动，不遮挡车辆原始中控台。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:infotainment&quot;&gt;
      &lt;p&gt;this is generally called ivi. &lt;a href=&quot;#fnref:infotainment&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Dec 2017 21:08:09 +0800</pubDate>
        <link>http://localhost:4000/2017/12/22/Aodai.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/22/Aodai.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>MCIM-MIPI</title>
        <description>&lt;h2 id=&quot;mcim使用mipi输出&quot;&gt;MCIM使用Mipi输出&lt;/h2&gt;

&lt;p&gt;MCIM（Multi-Camera input Module) was designed to accomplish multi-camera videos input via single video interface.  In most soc (especially general-purpose soc) , there are no more than two video input interfaces that what are dvp or mipi. MCIM make the soc captures four or five or six videos , and make some special need possible.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcmc-descript.jpg&quot; /&gt;
&lt;/div&gt;
&lt;!--more--&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;h3 id=&quot;摄像头&quot;&gt;摄像头&lt;/h3&gt;
&lt;p&gt;板卡支持AHD 720P摄像头输入，AHD接口的摄像头市面上型号很多，AHD也广泛使用于安防监控，汽车倒车影像等领域。板卡的摄像头接口中，给摄像头供电是5V电源，因此，只要是市面上可以采购到的 5V供电、720P分辨率的AHD摄像头都能支持接入。&lt;/p&gt;

&lt;p&gt;板卡最多支持6路AHD摄像头接入。介于输出接口带宽的限制，板卡并不保障任何场合都能够输出  6 x 720P@25fps的图像。只有在输出端使用 4lans MIPI 接口的时候，能够保证  6 * 1280*720@25fps的输出。&lt;/p&gt;

&lt;p&gt;输出接口使用8bits DVP的时候，如果后端处理器能够支持148.5Mhz的 pclk时钟，那么板卡最大可以输出 6 x 1280x360@25fps 或者  6 x 640x720@25fps的图像。&lt;/p&gt;

&lt;h3 id=&quot;输出接口&quot;&gt;输出接口&lt;/h3&gt;
&lt;p&gt;1lanes &amp;amp; 2lanes &amp;amp; 4lanes MIPI。&lt;/p&gt;

&lt;h3 id=&quot;使用配置&quot;&gt;使用配置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;4 x half 720P&lt;sup id=&quot;fnref:half720p&quot;&gt;&lt;a href=&quot;#fn:half720p&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;    »» 8bits dvp ,pclk &amp;lt;=  100M&lt;/li&gt;
  &lt;li&gt;4 x half 720P  + 720P  »»  8bit dvp, pclk = 148.5M&lt;/li&gt;
  &lt;li&gt;4 x 720P »» 16bit dvp, pclk = 148.5M&lt;/li&gt;
  &lt;li&gt;4 x half 720p + 2 x 720P »» 4 lanes mipi
 . 4 x 720P 				»» 4 lanes mipi
 . 6 x 720P				»» 4 lanes mipi&lt;/li&gt;
&lt;/ol&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcim-a-2.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;使用MIPI输出，在RK3288，Android平台 实现3D AVM功能。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:half720p&quot;&gt;
      &lt;p&gt;1280x720的图像降采样为 640x720 或者 1280x360 &lt;a href=&quot;#fnref:half720p&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 01 Dec 2017 21:08:09 +0800</pubDate>
        <link>http://localhost:4000/2017/12/01/mcim-mipi.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/01/mcim-mipi.html</guid>
        
        <category>Board</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>MCIM-CVI</title>
        <description>&lt;h3 id=&quot;mcim驱动dh9801实现cvi输出&quot;&gt;MCIM驱动DH9801实现CVI输出&lt;/h3&gt;

&lt;p&gt;碰到一个需求，希望将4个摄像头视频集成到一路CVI输出（我也没有办法，人家的设备上只有一个CVI输入接口，想要连接额外的摄像头，只能通过CVI信号输入），于是就上手开始调试DH9801，本来打算是三周时间连硬件带软件全部调试完成，但是中间碰到一个糟心的地方，前后花了一个半月才调通。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/images/mcmm-to-cvi-1.jpg&quot; /&gt;
&lt;/div&gt;
&lt;!--more--&gt;

&lt;h3 id=&quot;测试模式工作不稳定&quot;&gt;测试模式工作不稳定&lt;/h3&gt;

&lt;p&gt;DH9801的接口板是由合作方制作的，焊接完成后我拿到板子跟MCIM连接到一起，进行测试。DH9801的驱动程序是由原厂的工程师提供，所以不需要查看PDF，也不需要研究DH9801的工作原理，工作配置和杂七杂八的东西。同时原厂还提供了一个二十来页的的调试说明手册，这个手册很有帮助，虽然很简单，但是官方能够提供这么一个简单的文档，基本上就能把芯片的工作说清楚，让使用者很快把芯片用起来。还提供了一个调试说明，以流程图的形式指导使用者怎么对芯片进行调试，不过这个流程图基本没什么用处。因为如果开发人员没有做错什么事情的话，那一定完全不需要这个流程图，如果开发人员做了错误的事情，那么一定不会按照教科书里的样式出现错误。&lt;/p&gt;

&lt;p&gt;上电，外围信号检查一遍，没什么问题，就修改FPGA逻辑，按照BT1120时序输出720P时序。调了一天并没有图像输出，把可能出错的地方都检查了，就回过去做芯片自检测试，芯片有一个test pattern。调到test pattern输出后，CVI接收器能够显示彩条图像，但是图像持续的抖动。心想测试输出都不稳定，那正常信号没输出是正常的，于是开始各种方法检测test pattern，包括想办法调整晶振信号质量（换好晶振，换成fpga输出时钟），结果test pattern始终要持续的抖动。&lt;/p&gt;

&lt;p&gt;很闹心，在调了两三天没有结果的情况下。我做了一个判断：&lt;strong&gt;这个芯片的test pattern就是这个怂样，芯片没有问题，在正常工作（这个判断后续证明是对的）&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;bt1120时序驱动无输出&quot;&gt;BT1120时序驱动无输出&lt;/h3&gt;

&lt;p&gt;假设芯片是正常的，也没有问题，那就回到先前的地方，继续调BT1120时序。BT1120时序网上到处都能找到，但是关于行时序，我发现很多文档说的跟标准不一样。标准的行时序是：&lt;br /&gt;
` h_blank  | SAV | h_active | EAV&lt;code class=&quot;highlighter-rouge&quot;&gt;  
但是很多地方说的实现方法是  
&lt;/code&gt; EAV | h_blank  | SAV | h_active&lt;code class=&quot;highlighter-rouge&quot;&gt;  
这样就会导致，在Vsync信号变化的那两行，EAV，SAV实现不一样，猜想了一下后端的工作原理，觉得其实这两种实现应该都可以工作，只不过前者是&lt;/code&gt;Vsync,Hsync同时有效，Vsync滞后Hsync无效&lt;code class=&quot;highlighter-rouge&quot;&gt;，后者是&lt;/code&gt;Vsync提前Hsync有效，Vsync，Hsync同时无效`。但是为了保险起见，那就不按标准实现，按网上的说法实现吧，修改之后，还是没有输出。&lt;/p&gt;

&lt;h3 id=&quot;怀疑dh9801不能容忍时序抖动&quot;&gt;怀疑DH9801不能容忍时序抖动&lt;/h3&gt;

&lt;p&gt;理轮上，DVP信号，是靠Hsync，Vsync来做时序同步的，因为 HBlank，VBlank 的长度有细微的变化都是不影响工作的，包括摄像头驱动，甚至图像采集了一半时序停了也能正常工作（只要不触发超时出错）。但是反复看过几遍datasheet后，开始怀疑DH9801芯片对时序极度敏感。于是给DH的工程师发了邮件，同时修改BT1120时序，把中间所有的时序抖动都去掉了。&lt;/p&gt;

&lt;p&gt;然后CVI接收器接收到了正常的图像画面，DH工程师也回了邮件&lt;strong&gt;“DH9801严格按照手册中的时序工作”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;做了一个测试，在Hsync中多加入1,2个pclk，发现图像抖得很厉害，再增加一些额外的时钟周期，就不能正常工作接收到图像了。&lt;/p&gt;

&lt;h3 id=&quot;vsync之间最多可以插入200个pclk&quot;&gt;Vsync之间最多可以插入200个pclk&lt;/h3&gt;

&lt;p&gt;为了系统有最小的视频时延，不增加额外的视频时延，在MCIM中并没有采取帧缓存同步的方式，因为一使用帧缓存方式来做同步，就会额外增加40~80+ms的延时（看缓存工作方式）。MCIM中使用的是FIFO同步，MCIM会紧跟着最慢的那个摄像头的时序来做输出，保证额外的时延&amp;lt;40ms。那就意味着MCIM没有办法跟DH9801的时序严格同步，而是很大可能会比DH9801的时序慢一点点。计算了一下，按照市面采购晶振+-5pps的精度。720P\25fps@74.25Mhz的摄像头，每一帧的时序误差应该是+-150pclk。&lt;/p&gt;

&lt;p&gt;必须想办法在驱动DH9801的BT1120时序中插入抖动，否则没法工作。于是测试在帧与帧之间插入抖动时间，测试的结果是，如果帧与帧之间插入不大于200pclk的时隙，则DH9801仍然正常工作，但是图像可能感觉会产生轻微的偶尔的不太能够感觉出来的抖动。但是如果帧与帧之间插入400+pclks，那么CVI接收器接收到的图像就会明显的跳动，影响观看了。&lt;/p&gt;

&lt;h3 id=&quot;功能完善&quot;&gt;功能完善&lt;/h3&gt;

&lt;p&gt;解决时序抖动的问题之后，又增加了图像切换的功能，终于完成了MCIM驱动DH9801输出CVI信号的工作。记录一下，因为DH9801的接口时序 设计有点 出乎意料，&lt;del&gt;想一想，当初做设计的那个前端工程师应该完全没有考虑过摄像头图像的时间偏差和同步的问题，就这么定版交付了。&lt;/del&gt; （这句话是错的）&lt;/p&gt;

&lt;h3 id=&quot;201804-补充&quot;&gt;201804 补充&lt;/h3&gt;

&lt;p&gt;上面这段话是错的。&lt;/p&gt;

&lt;p&gt;后来我又调试了AHD输出（NVP6021），刚开始没有仔细思考这个问题，只是觉得CVI设计有问题， 后来再调试NVP6021的时候也发现AHD信号同样对输入时序极其敏感。脑子里郁闷了两天之后想起来以前调试CVI的经验，再想想电视信号， 我就明白了。 CVI跟AHD都是模拟信号， 异步信号，必须要严格的时序敏感，才能保证接收端用一个存在偏差的时钟，能够准确的采样出在传输线上多少产生了畸变的信号波形。&lt;strong&gt;模拟不熟悉，一直在用数字的习惯去思考模拟信号&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;后续在MCIM上增加了帧滑动机制，摄像头如果时钟慢， 那么MCIM会若干秒钟自动重复一帧图像， 如果摄像头时钟快，那么MCIM会若干秒钟自动跳过一帧图像。输出时序不用再增加时序抖动来匹配前端摄像头输入的时钟偏差了，也就这解决了这个时序敏感的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;视频系统通过插帧丢帧来同步时钟快慢问题是基本方法，为啥最早没这么做，因为懒，当初觉得插入时序抖动是最省事的方法，于是就这样用了一年多。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/15/mcim-cvi.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/15/mcim-cvi.html</guid>
        
        <category>Board</category>
        
        
        <category>Hardware</category>
        
      </item>
    
      <item>
        <title>Dvp接口调试记录汇总</title>
        <description>&lt;!--more--&gt;

&lt;p&gt;手头有一个Imx6的开发板E9，带有Dvp摄像头接口，这个板子上Dvp接口是双排针，飞线很方便，查看Imx6的TRM，确认Imx6的Dvp接口支持的pclk非常高，最高能到240Mhz，于是再这个Dvp接口上做了很多并行摄像头接口的测试工作，这里把前期的调试记录汇总到一起，以便参考。&lt;/p&gt;

&lt;h3 id=&quot;fpag-dvp输出极限频率&quot;&gt;Fpag dvp输出极限频率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2017-08&lt;/strong&gt;&lt;br /&gt;
后续又做了一下测试，对spartan6输出管脚的信号约束进行了各种尝试。确认，在3.3V IO电平的情况下，Imx6端可以稳定接收到图像信号的频率大概是160Mhz，如果pclk高于这个频率，则图像就会时序错乱，输出各种样式的花屏。应该是更高的频率必须使用更低的IO电平了才能实现了。&lt;br /&gt;
另外就是E9这个板子 dvp接口的干扰问题，io之间串扰能到好几百mv，中间测试的过程中，反复因为这个串扰导致 图像错乱。 dvp不工作，  iic跑不通。出过两次之后就系统的定位了一下，确认串扰是在E9板子上产生的。&lt;/p&gt;

&lt;h3 id=&quot;fpga输出dvp信号约束&quot;&gt;Fpga输出dvp信号约束&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2017-05-17&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;dvp输出信号，pclk 小于等于130Mhz，imx6接收图像无绿条纹，pclk大于135Mhz，则imx6接收到的图像有绿条，少则十来条，多则整屏都是，只能看到小部分图像。&lt;/li&gt;
  &lt;li&gt;修改 ucf，DRIVE = 2，8 两个值都没用。&lt;/li&gt;
  &lt;li&gt;去掉 DRIVE 约束， 增加 SLEW = fast， PCLK=150M，4路图象输入，图像显示正常
4，去掉 DRIVE 约束， 增加 SLEW = fast ，PCLK =150M，5路图像输入，图像显示正常&lt;/li&gt;
  &lt;li&gt;修改为16bit，720PX5 输出，时序无问题，图像稳定（基本确定后续上MIPI接口，带宽足够）  &lt;strong&gt;存在起始位置对不齐的bug，后续还要修改&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fpga-fifo容量测试&quot;&gt;Fpga Fifo容量测试&lt;/h3&gt;
&lt;p&gt;Dvp输出时，dvp输出时序跟ddr之间需要一个输出行缓存usbfifo，这个行缓存最初设计时64bits x 1K。&lt;br /&gt;
Camera输入时，cam输入时序跟ddr之间需要一个输入行缓存camfifo，这个行缓存最初设计是32bit x 2k。&lt;/p&gt;

&lt;p&gt;减小usbfifo大小，usbfifo减小到 64bits*512，工作正常，总的ramb16b块为30个，满足 xc6slx16的容量，修改fifo的过程中，发现 dr_fifo.v 中整个逻辑的 fifo空满判断的大量运算是错的。但是整个工程长时间也运行下来了，真是奇葩。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20170518&lt;/strong&gt;&lt;br /&gt;
减小camfifo大小，camfifo减小到 32bit*1K，目前看工作也正常。 总得ramb16bit块为20个。&lt;/p&gt;

&lt;h3 id=&quot;e9板干扰1&quot;&gt;E9板干扰1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2015-05-05&lt;/strong&gt;&lt;br /&gt;
在fpga中将CK的逻辑测试完成后，需要LZ(BB)协助调试驱动的bug，然后再飞线焊接了2块电路板，准备提供给LZ(BB)测试，结果发现新的板子，逻辑时钟不对，VS没有信号输出。新板子跟老板子都是排线飞的，唯一的差别是老板子飞线长4cm左右，新板子的线稍微长1cm左右。
这个时候主要怀疑是PWDN，RSTn的问题，因为CK的逻辑依赖的外部控制信号就是这俩，但是示波器发现这俩信号电平都对，只是干扰有些大，有+-六七百mV。在测试的过程中，时不时碰到VS,HS,PWDN信号，VS就会有输出，逻辑就会正常工作，这样就更怀疑是干扰的问题了。&lt;/p&gt;

&lt;p&gt;然后给PWDN对地接了100pF电容，问题解决，时序工作正常。
估计是PWDN在逻辑中的工作方式和作用，导致了逻辑对这个信号的干扰敏感。&lt;/p&gt;

&lt;h3 id=&quot;ov3640-on-imx6&quot;&gt;OV3640 on IMX6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2014-12-01&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;使用ov3640摄像头，仔细确认了i2c配置结果，确认，有三个地方涉及到分辨率：&lt;strong&gt;1.i2c配置摄像头的输出分辨率， 2.驱动程序采集的宽高，3. 应用层获取的图像分辨率。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2014-06-24调试时，&lt;strong&gt;第3处不能设置高于1024分辨率的问题还是存在，可能需要改MXC的配置程序。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果2的分辨率比1小，图像会被截断。&lt;br /&gt;
如果2的分辨率比1大，则程序应该采不到足够的数据无法进入终端（还没严格测试实验）。&lt;br /&gt;
如果2和3的分辨率不一致，则ISP会对图像进行拉伸。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ov3640，配置为1280*720分辨率时，驱动配置[0][4]，VS是7.5hz，负脉冲。200f用时26S。&lt;/p&gt;

&lt;p&gt;PO3100摄像头，输出为逐行的1280x720，VS是25hz，负脉冲，200f用时8S。&lt;br /&gt;
xclk是24M，pclk72M，飞线的信号质量很差，不停的掉行跳帧，示波器探头碰到VS或者HS就能稳定一些。&lt;/p&gt;

&lt;h3 id=&quot;po3100飞线-on-imx6&quot;&gt;PO3100飞线 on IMX6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2014-11-28&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;飞线调试PO3100摄像头，可以采到图像，但是感觉clk跟hs信号质量都不好，丢行，掉数据，如果将示波器探针放到hs上，图像就会稳定很多。&lt;/li&gt;
  &lt;li&gt;按照示波器探头的参数（输入阻抗1MΩ，寄生电容24pF），在clk跟hs信号上接一个100pF的对地电容，信号就稳定很多。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ov7725-on-imx6&quot;&gt;OV7725 on IMX6&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2014-11-27&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用ov7725摄像头连接到imx6上测试，imx6默认输出YUV视频信号，因此略过IIC部分工作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ov7725使用imx6提供的24M时钟，采集到的图像会有噪点（噪声样式与fpga驱动vga屏幕，时钟域没约束好时一样，零星的出现绿色噪点分布在轮廓线上），将示波器点到xclk信号上，噪点成倍加剧。使用板上的24M晶振，采集到的图像无噪点。但是出过一次异常，下半截有1/6左右的图像于上本部分不同步，重新焊接晶振后问题解决。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用外接24M时钟的时候，图像很问题，感觉以前ov3640，mt9v034程序跑飞可能是imx6输出的24M时钟质量不好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;imx6上接tvp5158-iic问题&quot;&gt;imx6上接tvp5158 iic问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2014.08.21&lt;/strong&gt;  &lt;br /&gt;
硬件环境：fpga扩展板跟imx6主板连接，接口为fpga输出camera接口到imx6，imx6的i2c接口连接到fpga板子上的tvp5158芯片，配置其工作状态。
早先用相同的方法连接过fpga板子与dm3730主板。接口仍然是1个camera接口，1个i2c。
dm3730与fpga相连，3730的程序能够正常的配置tvp5158，毫无问题。
imx6在连接fpga之间，也连接了ov3640，mt9v034两个摄像头板，i2c工作都没有问题。&lt;/p&gt;

&lt;p&gt;将imx6跟fpga相连，把3730上的i2c配置tvp5158的程序移植到imx6上（去掉两个多余的头文件，改变一下i2c通道设备号，其余完全不变）。i2c程序始终运行不通，用示波器查看波形，也有clk信号，但是clk波形只有1个byte，感觉像是ack没有回来，让host逻辑卡住了。但是示波器只有一个探头，无法同时观察sclk，sda信号，没法确认ack的问题。后来发现，用示波器测试的过程中，偶尔能够配置成功1,2个寄存器。因此，觉得是imx6跟fpga相连，阻抗或者上下拉有不匹配造成的，仔细查看原理图，i2c连接巨简单，fpga上就是一个设备，imx6上就俩设备，没有任何可能产生问题的地方。&lt;/p&gt;

&lt;p&gt;因为无法查看波形，根据现象看，只要用示波器探头点住，偶尔能成功一下。5158 i2c前串了22欧的电阻，尝试把这个电阻改小，改大，都故障依旧。后来用万用表测量了示波器探头的电容，大概是0.7nF。根据这个值，在5158 i2c 的sda端跟地之间接了1nF电容。i2c正常工作，毫无问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示波器探头的实际寄生电容是12pF，探头上清清楚楚标记的。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/17/dvp-camera-test-memo.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/17/dvp-camera-test-memo.html</guid>
        
        <category>Hardware</category>
        
        
        <category>Hardware</category>
        
      </item>
    
      <item>
        <title>xu3 qt编译</title>
        <description>&lt;!--more--&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;&lt;font color=&quot;#bb6688&quot;&gt;参考资料&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://wiki.qt.io/ODROID-XU3&quot;&gt;Qt5 on Xu3 官方资料&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://wiki.qt.io/Building_Qt_5_from_Git&quot;&gt;Qt5 Xu3 依赖&lt;/a&gt;&lt;br /&gt;
https://doc-snapshots.qt.io/qt5-dev/embedded-linux.html&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;没有现成的Qt for OdroidXu3，所以需要自己编译。可以在OdroidXu3上编译，但是不实用，因为性能时间的关系（实际测试，在Xu3上编译Qt5，用时刚好 &lt;strong&gt;2小时&lt;/strong&gt; 上下）。或者进行交叉编译，不管是哪种方法，OdroidXu3都需要一些 development dependecies。&lt;/p&gt;

&lt;h3 id=&quot;development-dependencies&quot;&gt;&lt;font color=&quot;#bb6688&quot;&gt;Development Dependencies&lt;/font&gt;&lt;/h3&gt;
&lt;h4 id=&quot;桌面系统&quot;&gt;桌面系统&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Git(&amp;gt;=1.6)&lt;/li&gt;
  &lt;li&gt;Perl(&amp;gt;=5.14)&lt;/li&gt;
  &lt;li&gt;Python(&amp;gt;=2.6x)&lt;/li&gt;
  &lt;li&gt;C Compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ssl&quot;&gt;SSL&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://doc.qt.io/qt-5/ssl.html#enabling-and-disabling-ssl-support&quot;&gt;ssl-support&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;webkit&quot;&gt;WebKit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;bison&lt;/li&gt;
  &lt;li&gt;flex&lt;/li&gt;
  &lt;li&gt;gperf&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;ICU&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;linuxx11&quot;&gt;Linux/X11&lt;/h4&gt;
&lt;p&gt;Ubuntu/Debian 可以通过一个方便的方式安装Qt5的所有依赖&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get build-dep qt5-default  
sudo apt-get install libxcb-xinerama0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者是通过分开的组件进行安装&lt;br /&gt;
&lt;strong&gt;Build Essential&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install build-essential erl python git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Libxcb&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;OpenGL&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;br /&gt;
推荐enable accessibility, 安装 libatspi2, libdbus-1 development包。&lt;br /&gt;
&lt;strong&gt;Qt Webkit&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install flex bison gperf libicu-dev libxslt-dev ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;QtWebEngine&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev libdbus-1-dev libfontconfig1-dev libcap-dev libxtst-dev \
libpulse-dev libudev-dev libpci-dev libnss3-dev libasound2-dev libxss-dev libegl1-mesa-dev gperf bison
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果是ubuntu14.04 还额外需要&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libbz2-dev libgcrypt11-dev libdrm-dev libcups2-dev libatkmm-1.6-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;QtMultiMedia&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libasound2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;在目标板上编译qt&quot;&gt;&lt;font color=&quot;#bb6688&quot;&gt;在目标板上编译Qt&lt;/font&gt;&lt;/h3&gt;
&lt;h4 id=&quot;git获取源码&quot;&gt;git获取源码&lt;/h4&gt;

&lt;p&gt;我是直接下载的qt-everywhere-opensource 包，而不是通过git&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://code.git.io/qt/qt5.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://code.git.io/qt/qt5.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Check out target branch&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd qt5
git checkout 5.9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;初始化仓库&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;perl init-repository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不需要WebKit，WebEngine，可以加参数,推荐去掉这几个模块，除非确信需要使用WebKit，这几个部分庞大耗时，又容易出错。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--module-subset=default,-qtwebkit,-qtwebkit-examples,-qtwebengine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;指定发布版本（after init-repository）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd qt5
git checkout v5.8.0
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者还有一个完整的方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://code.qt.io/qt/qt5.git # cloning the repo  
cd qt5  
git checkout v5.8.0 # checking out the specific release or branch  
git submodule update --init # updating each submodule to match the supermodule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;configure&quot;&gt;Configure&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure -developer-build -opensource -nomake examples -nomake tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;build&quot;&gt;Build&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make -j4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在Xu3上编译总共用时 &lt;strong&gt;2小时&lt;/strong&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;交叉编译qt&quot;&gt;&lt;font color=&quot;#bb6688&quot;&gt;交叉编译Qt&lt;/font&gt;&lt;/h3&gt;
&lt;h4 id=&quot;交叉编译toolchain&quot;&gt;交叉编译toolchain&lt;/h4&gt;
&lt;p&gt;我下载了 arm-linaro-linux-gnueabihf-4.7&lt;/p&gt;
&lt;h4 id=&quot;根文件系统&quot;&gt;根文件系统&lt;/h4&gt;
&lt;p&gt;获得sysroot. 一种方法是将OdroidXu3 的emmc或者tf 安装到主机。二是拷贝一份。更复杂的方法是，可以通过ssh使用ssfs mount到主机。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//#assuming Ubuntu/debian  
sudo apt-get install sshfs  
ssh-copy-id odroid@&amp;lt;insert ip or hostname of ODROID-XU3&amp;gt;  
ssh-copy-id root@&amp;lt;insert ip or hostname of ODROID-XU3&amp;gt;  
mkdir -p ~/Code/Odroid/sysroot  
sshfs root@&amp;lt;insert ip or hostname of ODROID-XU3&amp;gt;:/ ~/Code/Odroid/sysroot  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果使用sshfs，任何到系统image库文件夹的链接都需要将绝对地址改为相对地址，可以使用脚本&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Code/Odroid/  
wget https://gist.githubusercontent.com/nezticle/affaee3d3905489c95f7/raw/3190bcb3ac6e9173fcfd4f305a551dc767eb1666/fixQualifiedLibraryPaths.sh  
chmod a+x fixQualifiedLibraryPaths.sh  
./fixQualifiedLibraryPaths.sh ./sysroot arm-linux-gnueabihf  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;configure-1&quot;&gt;Configure&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/yuexiaxiaoxi27172319/article/details/51992371?locationNum=5&amp;amp;fps=1&quot;&gt;Qt Configure 说明&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.cppblog.com/lauer3912/articles/136423.html&quot;&gt;Qt Configure 详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/shell_albert/article/details/45690653&quot;&gt;qt5 everywhere 编译 summary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-prefix [dir]&lt;/strong&gt; …… The deployment directory, as seen on the target device.(default /usr/local/Qt-5.6.2, $PWD if -developer-build is active)
部署目录，目标设备所见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-extprefix [dir]&lt;/strong&gt; …… The installation directory, as seen on the host machine. (default SYSROOT/PREFIX)
安装目录，主机上所见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-hostprefix [dir]&lt;/strong&gt; …… The installation directory for build tools running on the host machine. If [dir] is not given, the current build directory will be used. (default EXTPREFIX)
在主机上运行的build工具的安装目录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-sysroot [dir]&amp;gt;&lt;/strong&gt; …… Sets [dir] as the target compiler’s and qmake’s sysroot and also sets pkg-config paths.&lt;/p&gt;

&lt;font color=&quot;#ee2222&quot;&gt;
这几个目录设置太JB绕了，完全不知所谓，经过翻看其他人的帖子，记录，已经编译过程中的设置，我的理解如下.

**prefix**：部署路径，也就是编译的时候，编译输出放置的地方。如果这个路径被设置为 /usr/local/qt 之类的名字，那么自然编译完成后就无需 make install 了。因为已经放在使用时的路径了，但是如果编译的时候有 -developer-build 参数，则 prefix = $PWD。

**hostprefix**：安装路径，如果编译的结果并未放置到使用时的地方，那么 make 完之后再 make install 一下，所有的编译输出就被 mv 到对应的文件夹结构下了。默认值是EXTPREFIX。

**extprefix**：安装路径，如果-sysroot 有指定，则使用 此地址，否则使用 SYSROOT/PREFIX。则他妈说不通啊，如果 -sysroot 没指定，那 SYSROOT/PREFIX 等于JB啊。可能的意思是，如果 -sysroot被指定了，如果extprefix有值，则使用此路径，否则，使用 SYSROOT/PREFIX。这就能理解了，比如我交叉编译的时候，设置 prefix 为 /usr/local, 编译完成时，所有的编译结果都在主机的 /usr/local 路径下边，我的目标板 sd卡或者emmc 卡的文件系统（rootfs）通过Usb转接器 mount 在 /media/xx/Upan/ 目录，那么我就设置 sysroot 为 /media/xx/upan, 当我执行make install 操作时，就自然复制到 目标板的文件系统中了。（/media/xx/upan/usr/local/).
而extprefix生效的前提是 hostprefix 未设置，于是默认就使用 EXTPREFIX。 
&lt;/font&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Code/qt5/configure -commercial -confirm-license -debug -developer-build -prefix /usr/local -hostprefix ~/Code/Odroid/qt5-build \  
-extprefix ~/Code/Odroid/sysroot/usr/local -device odroid-xu3 -device-option \  
CROSS_COMPILE=~/Code/Odroid/toolchain/bin/arm-linux-gnueabihf- \  
-sysroot ~/Code/Odroid/sysroot -nomake tests -no-pch -skip qtwebkit -opengl es2 -xcb -eglfs -qpa xcb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面这段configure的路径是官方参考链接中给的参考路径，实际使用时请根据实际情况修改。&lt;/p&gt;

&lt;h3 id=&quot;issue&quot;&gt;&lt;font color=&quot;#bb6688&quot;&gt;ISSUE&lt;/font&gt;&lt;/h3&gt;
&lt;h4 id=&quot;could-not-get-lock-varlibdpkglock&quot;&gt;could not get lock /var/lib/dpkg/lock&lt;/h4&gt;
&lt;p&gt;通过终端安装程序sudo apt-get install xxx时出错：&lt;br /&gt;
E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)&lt;br /&gt;
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?&lt;/p&gt;

&lt;p&gt;出现这个问题可能是有另外一个程序正在运行，导致资源被锁不可用。而导致资源被锁的原因可能是上次运行安装或更新时没有正常完成，进而出现此状况，解决的办法其实很简单：&lt;br /&gt;
在终端中敲入以下两句&lt;br /&gt;
sudo rm /var/cache/apt/archives/lock&lt;br /&gt;
sudo rm /var/lib/dpkg/lock&lt;/p&gt;

&lt;p&gt;再试着安装，问题解决。&lt;br /&gt;
来源： http://blog.csdn.net/kevin_android_123456/article/details/8174343&lt;/p&gt;

&lt;h4 id=&quot;configure-fail-no-qpa-platform-plugin-enabled&quot;&gt;configure fail “No QPA platform plugin enabled!”&lt;/h4&gt;
&lt;p&gt;需要install libxcb 及相关包&lt;/p&gt;

&lt;h4 id=&quot;configure-error--cannot-stat-file--&quot;&gt;configure error “ cannot stat file … “&lt;/h4&gt;
&lt;p&gt;perl version too old&lt;/p&gt;
&lt;h4 id=&quot;qmlscene-segfaults-cannot-create-paltform-gl-context-none-of-glx-dri2-is-enable&quot;&gt;qmlscene segfaults “cannot create paltform GL context, none of GLX, DRI2 is enable”&lt;/h4&gt;
&lt;p&gt;需要 libx11-xcb-dev&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libx11-xcb-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;webkit-doesnt-compile-missing-icu&quot;&gt;WebKit doesn’t compile, missing ICU&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libicu-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;qt-d-bus-fails-to-build-due-to-inconsistent-user-defined-literal-suffixs&quot;&gt;Qt D-Bus fails to build due to “inconsistent user-defined literal suffixs”&lt;/h4&gt;
&lt;p&gt;使用gcc-4.7 编译Qt5 并且 D-Bus&amp;lt;1.4.20 。&lt;br /&gt;
升级D-BUS，或者手动修改，参考 原始链接。&lt;/p&gt;
&lt;h4 id=&quot;isnull-is-not-definedfrom-qvariant_ph&quot;&gt;…::isNull is not defined(from qvariant_p.h)&lt;/h4&gt;
&lt;p&gt;C++11在GCC里支持不好，configure时增加参数 -no-c11&lt;/p&gt;

&lt;h4 id=&quot;cc1fatal-error-pchrelease-sharedqtgui-no-such-file-or-directory&quot;&gt;cc1：fatal error: .pch/release-shared/QtGui: No such file or directory&lt;/h4&gt;
&lt;p&gt;暂时未解决得bug，增加配置参数 -no-pch&lt;/p&gt;

&lt;h4 id=&quot;touchscreenor-wacon-tablet-doesnt-work&quot;&gt;Touchscreen(or Wacon tablet) doesn’t work&lt;/h4&gt;
&lt;p&gt;见原始链接。&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/10/xu3-qt-setup.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/10/xu3-qt-setup.html</guid>
        
        <category>Devel</category>
        
        <category>Xu3</category>
        
        
        <category>Devel</category>
        
      </item>
    
  </channel>
</rss>
